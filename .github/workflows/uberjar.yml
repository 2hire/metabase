name: Build + Docker Uberjar

on:
  push:
    branches:
      - "master"
    paths-ignore:
      # config files
      - ".**"
      # documentation
      - 'docs/**'
      - "**.md"
      # this covers both BE and FE unit tests, as well as E2E tests
      - '**test/**'
      - "**_test.clj"
      - "**/frontend/**.unit.*"
  workflow_dispatch:
    inputs:
      commit:
        description: 'Optional full-length commit SHA-1 hash'

jobs:
  build:
    name: Build MB ${{ matrix.edition }}
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    strategy:
      matrix:
        edition: [oss]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
    steps:
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.commit }}
    - name: Prepare front-end environment
      uses: ./.github/actions/prepare-frontend
    - name: Prepare back-end environment
      uses: ./.github/actions/prepare-backend
      with:
        m2-cache-key: uberjar
    - name: Build
      run: ./bin/build.sh
    - name: Prepare uberjar artifact
      uses: ./.github/actions/prepare-uberjar-artifact

  check_jar_health:
    runs-on: ubuntu-22.04
    name: Is ${{ matrix.edition }} (java ${{ matrix.java-version }}) healthy?
    needs: build
    timeout-minutes: 10
    strategy:
      matrix:
        edition: [oss]
        java-version: [11, 17]
    steps:
    - name: Prepare JRE (Java Run-time Environment)
      uses: actions/setup-java@v3
      with:
        java-package: jre
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    - run: java -version
    - uses: actions/download-artifact@v3
      name: Retrieve uberjar artifact
      with:
        name: metabase-${{ matrix.edition }}-uberjar
    - name: Launch uberjar
      run: java -jar ./target/uberjar/metabase.jar &
    - name: Wait for Metabase to start
      run: while ! curl 'http://localhost:3000/api/health' | grep '{"status":"ok"}'; do sleep 1; done

  containerize_and_push:
    runs-on: ubuntu-22.04
    name: Containerize ${{ matrix.edition }}
    needs: check_jar_health
    strategy:
      matrix:
        edition: [oss]
    env:
      AWS_REGION: "eu-central-1"
      AWS_DOCKER_REPO: "dataanalyticsstack-metabaseservicerepository0ccf373d-ub9otebpphy8"
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - name: Extract and clean branch name
      shell: bash
      run: echo "branch=$(echo $GITHUB_REF_NAME | sed 's/[^-._a-zA-Z0-9]/-/g')" >> $GITHUB_OUTPUT
      id: extract_branch
    - name: Verify the intended tag of the container image
      run: echo "Container image will be tagged as ${{ steps.extract_branch.outputs.branch }}-${{ matrix.edition }}"
    - name: Check out the code (Dockerfile needed)
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.commit }}
    - name: Download uploaded artifacts to insert into container
      uses: actions/download-artifact@v3
      with:
        name: metabase-${{ matrix.edition }}-uberjar
        path: bin/docker/
    - name: Move the ${{ matrix.edition }} uberjar to the context dir
      run: mv bin/docker/target/uberjar/metabase.jar bin/docker/.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2.5.0
      with:
        driver-opts: network=host
    - name: Build ${{ matrix.edition }} container
      uses: docker/build-push-action@v3
      with:
        context: bin/docker/.
        platforms: linux/amd64
        network: host
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_DOCKER_REPO }}:${{ github.run_number }}-2hire-metabase-${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_DOCKER_REPO }}:latest
        no-cache: true
        push: true
